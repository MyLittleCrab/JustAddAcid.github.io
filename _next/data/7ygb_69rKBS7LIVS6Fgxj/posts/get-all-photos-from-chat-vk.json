{"pageProps":{"post":{"title":"Сбор и автоматическая фильтрация вложений диалога VK","titleEnabled":true,"date":"2021-06-19T12:05:26.774Z","slug":"get-all-photos-from-chat-vk","author":{"name":"Roman A. Nosov","picture":"https://avatars3.githubusercontent.com/u/21103635?s=120&v=4","url":"https://github.com/JustAddAcid"},"content":"<p>Удаляться из соцсетей всегда немного жалко. Особенно, когда годами использовал некоторые чаты просто как хостинг фотографий. Так что, мною было принято ответственное решение выкачать все <em>несколько-гигабайт</em> изображений из таких чатов и, естественно, удалить из них мусорные мемы <em>(хотя есть смысл их хранить где-то отдельно)</em></p>\n<p>Т.е. на сегодняшний вечер у нас две подзадачи:</p>\n<ol>\n<li>Выкачать контент</li>\n<li>Разложить контент на две директории: мемы и фото</li>\n</ol>\n<h2>Викачуємо</h2>\n<p>Поиск готовых расширений для браузера/софтин для выкачивания содержимого чатов завершился неудачно. Что ж, придется дёргать целый один(!) метод из VK API, кокой ужос. </p>\n<p>Для моих целей нужен метод <a href=\"https://vk.com/dev/messages.getHistoryAttachments\">messages.getHistoryAttachments</a>. А дёргать я его буду из обертки под node.js — <a href=\"https://github.com/ciricc/easyvk\">easyvk</a>, ибо незачем изобретать велосипеды. Скачивать буду пачками по 50 штук. Несмотря на то, что документация утверждает об умении выгружать вплоть до 200 штук на запрос, но на практике, на запросы больше 50 иногда не хотят отвечать.</p>\n<p>Логинимся, получаем объект vk, через который будем стучаться в API:</p>\n<pre><code class=\"language-JavaScript\">easyvk({\n  username: login,\n  password: password,\n  sessionFile: path.join(__dirname, '.my-session')\n}).then(async vk => { /* {...} */ });\n</code></pre>\n<p>Дальше остаётся лишь пробежаться циклом по всем вложениям, постоянно сохраняя id сообщения, на котором остановились:</p>\n<pre><code class=\"language-JavaScript\">const vkr = await vk.call('messages.getHistoryAttachments', {\n  peer_id: peerId,\n  media_type: 'photo',\n  count: 50,\n  start_from: from\n});\n\nconst downloads = vkr.items.map((item, index) => {\n  return download(item.attachment.photo.sizes.pop().url, './attachments/', { \n    filename: + item.attachment.photo.date + index + '.jpg' \n  })\n});\n\nawait Promise.allSettled(downloads);\n\nfrom = vkr.items.pop().message_id;\n</code></pre>\n<p>Элементарно. Осталось удалить дубликаты: т.к. если кто-то \"отвечал\" на сообщения с фотографией, она может продублироваться у нас в файлах. Мы можем сравнить фото по их md5 хешу, и удалить, если у каких-то картинок эти хеши совпадают.</p>\n<pre><code class=\"language-bash\">find . -type f \\\n    | xargs md5sum \\\n    | sort -k1,1 \\\n    | uniq -Dw32 \\\n    | while read hash file; do \n        [ \"${prev_hash}\" == \"${hash}\" ] &#x26;&#x26; rm -v \"${file}\"\n        prev_hash=\"${hash}\"; \n    done\n</code></pre>\n<h2>Сортируем изображения</h2>\n<p>Поначалу я думал, что на эту задачу я потрачу гораздо больше времени и сил. Но как оказалось, вся инфраструктура для этого уже давно изобретена и отработана. Достаточно лишь вызвать готовые инструменты. </p>\n<p>Отделять котлеты от мух будем по признаку наличия текста: </p>\n<ul>\n<li>Если на картинке есть текст длиннее 10 символов, то считаем её мемом</li>\n<li>Иначе считаем фотографией </li>\n</ul>\n<p>Для распознавания текста мне понадобится питон, OCR-движок <a href=\"https://github.com/UB-Mannheim/tesseract/wiki\">tesseract</a>, и следующие пакеты, которые можно установить через pip'у.</p>\n<pre><code class=\"language-bash\">pip install opencv-python\npip install pytesseract\n</code></pre>\n<p>Ну и простейший скрипт, который дёргает api распознавания, удаляет лишние whitespace'ы и проверяет длину строки. </p>\n<pre><code class=\"language-python\">import cv2\nimport pytesseract\nimport re\nimport os\n\ninputDir = '...'\nwithoutTextDir = '...'\nwithTextDir = '...'\n\ninputFilenames = os.listdir(inputDir)\n\nfor filename in inputFilenames:\n    img = cv2.imread(inputDir + '/' + filename)\n    text = pytesseract.image_to_string(img, lang='rus')\n    text = re.sub('\\s+', ' ', text)\n\n    if len(text) > 10:\n        # Перекладываем в папку, где хранятся картинки с текстом\n        os.rename(inputDir + '/' + filename, withTextDir + '/' + filename)\n    else:\n        # Перекладываем в папку, где хранятся картинки без текста\n        os.rename(inputDir + '/' + filename, withoutTextDir + '/' + filename)\n    print('\\n\\n', filename, '\\n', text)\n</code></pre>\n<p>Собственно, на этом всё. Есть, конечно небольшие погрешности в работе. Но они решаются беглым просмотром превью картинок. Фотографии выгружены, можно удаляться из вконтакта. </p>\n<p><a href=\"https://gist.github.com/JustAddAcid/79c3a5264880d77d7e069a34f0b33934\">Скрипт скачивания вложений из диалога</a></p>\n<p><a href=\"https://gist.github.com/JustAddAcid/e24ac023f841bb5f93b85085d380a3ac\">Сортировка картинок по наличию текста</a></p>\n","ogImage":{"url":"/assets/blog/get-all-photos-from-chat-vk/background.jpg"},"coverImage":"/assets/blog/get-all-photos-from-chat-vk/background.jpg","issueId":"22"}},"__N_SSG":true}