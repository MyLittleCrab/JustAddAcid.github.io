{"pageProps":{"post":{"title":"Использование issues в GitHub как движок комментариев","date":"2020-05-04T14:15:07.322Z","slug":"issue-comments-github","author":{"name":"Roman A. Nosov","picture":"https://avatars3.githubusercontent.com/u/21103635?s=120&v=4","url":"https://github.com/JustAddAcid"},"content":"<p>Хочу поделиться замечательной идеей: превращения <strong>GitHub issues</strong> в полноценный движок комментариев для статического блога. Достойная легковесная (и бесплатная!) замена <em>disqus</em> и аналогов.\nДля начала, маленькая вводная, с чего всё начиналось:</p>\n<p>Был скучный выходной день во время карантина и я лениво читал интернеты в поисках удобного движка комментариев для своего блога. Я уже был готов поддаться маркетингу disqus'a, но внезапно наткнулся на интересную статью:</p>\n<p>(<a href=\"http://donw.io/post/github-comments/\">http://donw.io/post/github-comments/</a>)</p>\n<p>В ней автор анализирует трафик своего сайта и приходит к удручающему выводу: <em>disqus</em> настолько активно использует трекеры и прочие запросы на сервер, что в примере автора, увеличивал количество XHR-запросов с 16 до 105! Это совершенно неприемлемо. И в качестве альтернативы, рассказчик предлагает переход к ... GitHub Issues! </p>\n<p>В статье прелагается следующая схема:</p>\n<ol>\n<li>На каждый пост в блоге открывается <em>issue в GitHub</em></li>\n<li>Все комментарии создаются непосредственно на сайте <em>GitHub</em></li>\n<li>При открытии страницы, клиентский JavaScript код получает все комментарии из issue через <em>issue API</em></li>\n</ol>\n<h2>Заводим свой <del>трактор</del> велосипед</h2>\n<p><img src=\"../assets/blog/issue-comments-github/%D0%BD%D0%BE_%D0%B7%D0%B0%D1%87%D0%B5%D0%BC.png\" alt=\"Возможно всё, но зачем?\"></p>\n<p>И тут я подумал, что раз уж весь мой блог использует <em>GitHub Pages</em> в качестве хостинга, то почему бы не попробовать ещё больше интегрироваться в экосистему гитхаба?</p>\n<h3>Предварительный алгоритм работы с комментариями (пока я не автоматизировал деплой):</h3>\n<ol>\n<li>Перед созданием поста, руками создаётся issue, оттуда копируется ID и вставляется в .md-темплейт поста.</li>\n<li>В исходники страницы добавлен маленький скрипт, который подхватывает этот id страницы и по нему (через Github API получает все комментарии (отрендеренный markdown в html)</li>\n<li>Рендер комментариев. </li>\n<li>Добавление кнопки \"создать комментарий\", который просто перебрасывает пользователя на страницу GitHub</li>\n</ol>\n<h3>Реализация</h3>\n<p>Поскольку я храню все посты на этом сайте в markdown файлах, мне первым делом нужно запомнить, что при создании файла, в метаданных я теперь буду обязан указывать issue id.</p>\n<pre><code class=\"language-javascript\">{\n    title: 'Первый пост с использованием markdown и next js'\n    excerpt: 'А заодно и проверка возможности писать на кириллице в этом шаблонизаторе. Если вы читаете этот текст, значит полет нормальный.'\n    coverImage: '/assets/blog/hello-world/завтра_будет_лучше.jpg'\n    date: '2020-05-03T21:00:07.322Z'\n    issueId: '1' // &#x3C;--- id созданного issue на GitHub\n} \n</code></pre>\n<p>В конец страницы с постом добавлен React-компонент Comments, который будет отображать комментарии из ГитХаба. </p>\n<pre><code class=\"language-html\">    &#x3C;article>\n        &#x3C;Comments \n            githubUser=\"JustAddAcid\"\n            githubRepo=\"JustAddAcid.github.io\"\n            issueId={post.issueId} />\n    &#x3C;/article>\n</code></pre>\n<p>Внутри компонента <strong>Comments</strong> делаем GET-запрос в <a href=\"https://api.github.com/repos/\">https://api.github.com/repos/</a> ${githubUser}/ ${githubRepo}/issues/ ${issueId}/comments. Например, для комментариев к этой странице, это будет:</p>\n<p>(<a href=\"https://api.github.com/repos/\">https://api.github.com/repos/</a> JustAddAcid/JustAddAcid.github.io/ issues/2/comments)</p>\n<pre><code class=\"language-javascript\">componentDidMount() {\n    if (!this.state.data) {\n        const githubUser = this.props.githubUser\n        const githubRepo = this.props.githubRepo\n        const issueId = this.props.issueId\n\n        const that = this;\n        window.fetch(`https://api.github.com/repos/${githubUser}/${githubRepo}/issues/${issueId}/comments`, {\n            headers: {\n                Accept: 'application/vnd.github.v3.html+json'\n            }\n        })\n            .then(response => response.json())\n            .then(comments => that.setState({\n                data: comments,\n                isLoading: false\n            }))\n</code></pre>\n<p>Ну и красиво рендерим JSON-array, который нам пришел из гитхаба</p>\n<pre><code class=\"language-javascript\">    render(){\n        // ....\n        {hasData &#x26;&#x26; (\n            this.state.data.map(comment => (\n                &#x3C;Comment\n                    key={comment.id}\n                    avatarUrl={comment.user.avatar_url}\n                    userProfileUrl={comment.user.html_url}\n                    userLogin={comment.user.login}\n                    commentDate={comment.created_at}\n                    commentBody={comment.body_html} />\n            ))\n        )}\n        &#x3C;LinkButton text=\"Добавить комментарий\" link={`https://github.com/${githubUser}/${githubRepo}/issues/${issueId}`} />\n    }\n</code></pre>\n<p>После причесывания стилей — получаем достаточно минималистичную и приятную на глаз систему комментариев с поддержкой markdown, цитирования и т.д., которой можно воспользоваться внизу страницы.</p>\n<p>Ещё увидимся.</p>\n<p><a href=\"/tags/%D1%82%D0%B0%D0%BD%D1%86%D1%8B_%D1%81_%D0%B1%D1%83%D0%B1%D0%BD%D0%BE%D0%BC\">#танцы<em>с</em>бубном</a> <a href=\"/tags/javascript\">#javascript</a> </p>\n","ogImage":{"url":"/assets/blog/issue-comments-github/cover.png"},"coverImage":"/assets/blog/issue-comments-github/cover.png","issueId":"2"}},"__N_SSG":true}