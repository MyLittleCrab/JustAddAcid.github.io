{"pageProps":{"post":{"title":"Автоматизируем деплой статического сайта с помощью CircleCI","date":"2020-05-05T16:12:07.322Z","slug":"circle-ci","author":{"name":"Roman A. Nosov","picture":"https://avatars3.githubusercontent.com/u/21103635?s=120&v=4","url":"https://github.com/JustAddAcid"},"content":"<p>С хостингом и комментариями немного разобрались. Теперь заставим нашу шайтан-машину автоматически пересобирать сайт, если в .md шаблонах произошли какие-то изменения. Потому что нет никакого желания <strong>каждый раз</strong> после минимального изменения статьи делать руками билд, перетаскивать собранные <em>html</em> страницы в другой репозиторий и коммитить. Естественно, это можно и нужно оптимизировать. В качестве подопытного кролика сегодня выступает сервис <em>CircleCi</em>, у которого достаточно удобный бесплатный тариф, которого нам будет более чем достаточно.</p>\n<p><strong>Для тех, кто в танке и никогда об этом не слышал:</strong> <em>CircleCi</em> — это облачный сервис для continuous integration. Умеет следить за изменениями в Git-репозиториях и пересобирать билды приложений, прогонять тесты и т.д. Тестить в статическом блоге толком нечего, а вот функция собирать билды нам как раз пригодится.</p>\n<p><strong>Для бородатых админов:</strong> я не большой спец в CI, так что, если код будет не совсем согласован с общепринятыми Best-Practice, то прошу меня извинить и прошу написать в комментариях о том, как это сделать лучше и безопасней.</p>\n<h2>Автоматизировали, автоматизировали, да не выавтоматизировали</h2>\n<p><img src=\"../assets/blog/circleci/meme.jpeg\" alt=\"If you never deploy, your deploy never falls\"></p>\n<p>Итак, поехали. Для начала, нужно определиться, что за нас должна делать шайтан-машина.\nПредварительный алгоритм:</p>\n<ol>\n<li>Скрипт проверяет все .md файлы с постами на предмет того, создана ли для него issue на GitHub (для реализации комментариев, <a href=\"./issue-comments-github\">о которых здесь</a>)</li>\n<li>Если к .md файлу не привязана issue, то создать, и записать в файл issue id. Сделать коммит и пуш</li>\n<li>Сделать билд в статический html</li>\n<li>Положить файлы билда в репозиторий с github pages (JustAddAcid.github.io). Сделать коммит и пуш</li>\n</ol>\n<h2>Реализация — скрипт проверки и привязки issue</h2>\n<p>В package.json объявим скрипт issues, который запускает файл issues.mjs из корня. </p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"export\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next export\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"issues\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node issues.mjs\"</span> <span class=\"token comment\">//  &#x3C;--- </span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>В issues.mjs следующая логика: во всех файлах с постами скрипт ищет подстроку %%ISSUЕ_ID%%. И если находит, то создаёт новое GitHub Issue, а его ID подставляет вместо %%ISSUЕ_ID%%.</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> issueNotCreatedYet <span class=\"token operator\">=</span> <span class=\"token string\">'%%ISSUЕ_ID%%'</span><span class=\"token punctuation\">,</span>\n      notCreatedRegExp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>issueNotCreatedYet<span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> filesInDir <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDir<span class=\"token punctuation\">)</span> <span class=\"token comment\">// получаем имена файлов в директории</span>\n    \n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fileName <span class=\"token keyword\">of</span> filesInDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> postsDir <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">,</span>\n              fileText <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              nameWithoutExtension <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    \n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fileText<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>issueNotCreatedYet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n            <span class=\"token keyword\">const</span> issueId <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">createIssue</span><span class=\"token punctuation\">(</span>nameWithoutExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  newText <span class=\"token operator\">=</span> fileText<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>notCreatedRegExp<span class=\"token punctuation\">,</span> issueId<span class=\"token punctuation\">)</span>\n            fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> newText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>А функция, createIssue представляет собой post-запрос в github api</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createIssue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.github.com/repos/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>githubUser<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>targetRepo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/issues</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        method<span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            title<span class=\"token operator\">:</span> <span class=\"token string\">'Comments: '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">,</span>\n            body<span class=\"token operator\">:</span> postPrefix <span class=\"token operator\">+</span> name\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Accept'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'application/vnd.github.v3.html+json'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token function\">basicAuthHeader</span><span class=\"token punctuation\">(</span>githubUser<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> createdIssue <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> createdIssue<span class=\"token punctuation\">.</span><span class=\"token property-access\">number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><em>В примере выше для авторизации на GitHub используется basic auth header, который сейчас является <strong>deprecated</strong>. Такая возможность авторизоваться будет <strong>удалена</strong> в ноябре 2020. <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-password-auth/\" title=\"Deprecating password authentication\">Больше информации здесь.</a></em></p>\n<p>Теперь мне нужно запомнить, что всегда, когда я хочу, чтобы система автоматически создала issue, нужно вместо ID созданной руками issue писать директиву %%ISSUЕ_ID%%</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    excerpt<span class=\"token operator\">:</span> <span class=\"token string\">'С хостингом и комментариями немного разобрались. Теперь заставим нашу шайтан-машину пересобирать сайт, если в .md шаблонах произошли какие-то изменения'</span>\n    coverImage<span class=\"token operator\">:</span> <span class=\"token string\">'/assets/blog/circleci/cover.png'</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2020-05-05T16:12:07.322Z'</span>\n    issueId<span class=\"token operator\">:</span> <span class=\"token string\">'%%ISSUЕ_ID%%'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Реализация — конфиг CircleCi</h2>\n<p>Конфиг <em>CircleCi</em> представляет собой <strong>config.yml</strong> файл в директории <strong>.circleci</strong> в корне вашего репозитория. Сам конфиг-файл содержит описания шагов, которые должен сделать сервер, чтобы задеплоить ваше приложение и/или запустить тесты. </p>\n<p>Но для начала нужно примерно представить, какие действия (shell-команды) нам всё-таки нужно проделать. У меня получилось как-то так:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Представляемся гиту</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token variable\">$GH_EMAIL</span>\n<span class=\"token function\">git</span> config --global user.name <span class=\"token variable\">$CIRCLE_USERNAME</span>\n\n<span class=\"token comment\"># Запускаем скрипт проверки issues</span>\n<span class=\"token function\">npm</span> run issues\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">git</span> status --porcelain<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token comment\"># Если мы изменили какие-то файлы — делаем коммит. </span>\n  <span class=\"token comment\"># А деплой будем делать в следующем таске, которые запустится при коммите</span>\n  <span class=\"token function\">git</span> <span class=\"token function\">add</span> -A\n  <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Automated issues creation: <span class=\"token variable\">${CIRCLE_SHA1}</span>\"</span>\n  <span class=\"token function\">git</span> push\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Pushed changes in current repo. Deploy in next task\"</span>\n  circleci-agent step <span class=\"token function\">halt</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token function\">npm</span> run build\n\n<span class=\"token comment\"># Клонируем репозиторий сайта во временную папку и удаляем лишние директории</span>\n<span class=\"token function\">git</span> clone <span class=\"token variable\">$TARGET_REPO_URL</span> targetDirectory\n<span class=\"token builtin class-name\">cd</span> ./targetDirectory/\n<span class=\"token function\">rm</span> -rf ./_next\n<span class=\"token function\">rm</span> -rf ./assets\n<span class=\"token function\">rm</span> -rf ./favicon\n<span class=\"token function\">rm</span> -rf ./posts\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deleting folders from <span class=\"token environment constant\">$PWD</span>\"</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token comment\"># Инициируем экспорт проекта в статические html</span>\n<span class=\"token function\">npm</span> run <span class=\"token builtin class-name\">export</span>\n<span class=\"token comment\"># Перекладываем html в наш репозиторий с сайтом</span>\n/bin/cp ./out/* ./targetDirectory/ -R -f\n<span class=\"token builtin class-name\">cd</span> ./targetDirectory/\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"commit in dir <span class=\"token environment constant\">$PWD</span> into <span class=\"token variable\">$TARGET_REPO_URL</span> repo\"</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> -A\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Automated deployment to GitHub Pages: <span class=\"token variable\">${CIRCLE_SHA1}</span>\"</span> --allow-empty\n<span class=\"token function\">git</span> push\n</code></pre></div>\n<p>Осталось натянуть этот скрипт на конфиг <strong>CircleCi</strong>:\nСоздаём в репозитории директорию <strong>.circleci</strong>, в ней файл <strong>config.yml</strong> с примерно следующим содержанием:</p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.1</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> circleci/node<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> checkout\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">restore_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">keys</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> v1<span class=\"token punctuation\">-</span>dependencies<span class=\"token punctuation\">-</span>\n            <span class=\"token punctuation\">-</span> v1<span class=\"token punctuation\">-</span>dependencies<span class=\"token punctuation\">-</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm install\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">save_cache</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> node_modules\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> v1<span class=\"token punctuation\">-</span>dependencies<span class=\"token punctuation\">-</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"></span>\n<span class=\"token scalar string\">            git config --global user.email $GH_EMAIL</span>\n<span class=\"token scalar string\">            git config --global user.name $CIRCLE_USERNAME</span>\n\n            <span class=\"token comment\"># .... тот shell-скрипт, который представлен выше</span>\n</code></pre></div>\n<p>Остались мелочи:</p>\n<ol>\n<li>Зайти на сайт <a href=\"/tags/CircleCi\">#CircleCi</a>, залогинившись своим аккаунтом GitHub</li>\n<li>Во вкладке projects выбрать нужный репозиторий</li>\n<li>Передать все используемые в скриптах переменные окружения</li>\n<li>Создать user-key (для возможности коммита в репозиторий)</li>\n</ol>\n<p>В итоге, при каждом коммите в репозиторий будет просыпаться скрипт в CircleCi и пересобирать статический блог.</p>\n<p>Ещё увидимся.</p>\n<p><a href=\"/tags/javascript\">#javascript</a> <a href=\"/tags/bash\">#bash</a> </p>\n","ogImage":{"url":"/assets/blog/circleci/cover.png"},"coverImage":"/assets/blog/circleci/cover.png","issueId":"7"}},"__N_SSG":true}