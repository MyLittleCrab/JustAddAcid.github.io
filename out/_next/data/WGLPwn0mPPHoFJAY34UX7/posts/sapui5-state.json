{"pageProps":{"post":{"title":"Как запилить реактивность на SAPUI5 — часть 1","date":"2020-06-15T14:15:07.322Z","slug":"sapui5-state","author":{"name":"Roman A. Nosov","picture":"https://avatars3.githubusercontent.com/u/21103635?s=120&v=4","url":"https://github.com/JustAddAcid"},"content":"<p>Решил описать то, как можно удобно хранить состояния экранов (или всего приложения) внутри <em>SAPUI5</em> и делать реактивность (Почти как у больших и нормальных фреймворков).</p>\n<p><strong>Для тех, кто в танке и никогда не слышал, что это такое</strong> <em>SAPUI5</em> — это фронтенд-фреймворк. Как  хипстерские <em>Vue</em> и <em>React</em>, только никому не нужен. Используется для быстрого написания фронтендов поверх выгрузки данных из SAP-ERP. </p>\n<p>Внезапно, но он действительно неплохо интегрирован со всей сап-экосистемой и простенькие приложения (внутри определенных рамок) писать не сильно больно. Проблемы начинаются тогда, когда нужно сделать что-то <em>большее</em>, чем просто нарисовать табличку с двумя кнопками. И внезапно вылезают всеобщая громоздкость синтаксиса, нестабильность работы некоторых контролов и отсутствие нормального комьюнити.</p>\n<p><img src=\"../assets/blog/sapui5-state/meme.png\" alt=\"Learning programming sapui5\"></p>\n<h2>Стейты стейты стейты</h2>\n<h3>Для начала немного теории</h3>\n<p>Что такое реактивное программирование очень хорошо объяснено <a href=\"https://webdevblog.ru/ponimanie-reaktivnosti-vo-vue-js-shag-za-shagom/\">здесь</a> только примеры для другого фреймворка. Но это не важно! :)</p>\n<p>В основе лежит идея о том, что было бы очень неплохо, если бы контролы сами смотрели в данные и <strong>перестраивались</strong> бы автоматически, если что-нибудь в этих данных поменяется, без кучи явных хендлеров и присвоений значений в контролы по многу раз. </p>\n<p>И наоборот — было бы неплохо, если бы данные <strong>перестраивались</strong> автоматически, если, например, в каком-нибудь input'e пользователь ввел другое значение.</p>\n<h4>Вот такой вот интересный <strong>two-way binding</strong> ¯\\<em>(ツ)</em>/¯</h4>\n<p>Давайте человеческим языком — суть в том, что все данные у нас сложены в одну коробку (массив/объект) и все контролы на странице рендерятся на основе этих данных. </p>\n<p>Плюсы здесь в том, что это, мать его, облегчает чтение и уменьшает размер нашего нелюбимого жабаскрипта. А чем меньше жабаскрипта — тем лучше.</p>\n<p>А ещё сразу понятно, что приложение делает, если взглянуть на модель данных. А ещё это кодится быстрее за ту же зарплату. Ну вы понимаете.</p>\n<h3>Разберем на практике избитый пример:</h3>\n<h4>Тудушница</h4>\n<p>Давайте за минуту напишем простейший toDo-лист с единым хранением состояния. </p>\n<p>Для начала создаём пустое <em>SAPUI5</em> приложение с единственной view — <em>index.view.xml</em>, которая сразу при открытии будет отображаться пользователю. </p>\n<p>Идем от данных! Какие данные примерно должна хранить todo-list? Наверное, массив заметок с полями: checked, text, и id. Ну и содержимое текстового поля, которое генерирует новые заметки. Получилось примерно вот так:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    input<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Тут будут объекты вот в таком формате:</span>\n    <span class=\"token comment\">// \t{</span>\n    <span class=\"token comment\">// \tid: \"1\",</span>\n    <span class=\"token comment\">// \ttext: \"one\",</span>\n    <span class=\"token comment\">// \tchecked: true</span>\n    <span class=\"token comment\">// }</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Состояние в <em>SAPUI5</em> лучше всего хранить в объекте класса sap.ui.model.json.<strong>JSONModel</strong>. Он позволяет подписываться на изменения каждого из свойства хранимого объекта, - как из XML-view в декларативном стиле, так и напрямую писать хендлеры изменений из кода. Почему класс называется именно JSONModel - для меня остаётся загадкой, т.к. де-факто он хранит обычный JavaScript объект.</p>\n<p>Открываем файл <em>/controller/index.controller.js</em> и по событию инициализации создаём <em>JSON-model</em> и заполняем её данными.</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">onInit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      input<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"viewState\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Модель присваивается к <em>View</em> с помощью метода <em>.setModel</em>. В данном конкретном случае псевдоним модели (\"<em>viewState</em>\") можно было не указывать, т.к. модель всего одна и путаницы возникнуть не может. </p>\n<p>Давайте попробуем представить, как бы у нас выглядел метод создания новой заметки:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">appendTodo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      checked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/input\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>Очень просто. Получение массива заметок, создание массива со старыми + новой заметкой и присвоение его к модели. Затем очистка поля ввода.</p>\n<p>В качестве id нам пока вполне подойдет текущий таймстемп. Вместо Array.prototype.concat, если очень хочется, можно использовать ES6 spread operator:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>oldArray<span class=\"token punctuation\">,</span> newElement<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>Но не очень нужно, т.к. у sapui5 из коробки нет никакого препроцессинга кода, а написанный энтузиастами плагин для Babel не для production-use. И используя фичи es6 мы автоматически делаем наш код неспособным запуститься на ie10-11 (а у некоторых он до сих пор — корпоративный стандарт).</p>\n<p>Переходим к разметке интерфейса. Там всё просто: поле создания заметок + список.</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>content</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Input</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{viewState>/input}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">submit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>appendTodo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>List</span> <span class=\"token attr-name\">items</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{viewState>/todos}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>items</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>CustomListItem</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>HBox</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>CheckBox</span> <span class=\"token attr-name\">selected</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{viewState>checked}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Input</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{viewState>text}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Button</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">press</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteTodo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">data:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{viewState>id}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>HBox</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>CustomListItem</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>items</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>List</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>content</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>ID заметки будем передавать в data-* атрибуте. (Чтобы неймспейс data: в разметке заработал, нужно его подключить в самом верху view)</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token namespace\">mvc:</span>View</span> \n  <span class=\"token attr-name\">controllerName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todoTodo.controller.index<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>mvc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sap.ui.core.mvc<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\">displayBlock</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sap.m<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>data</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>Метод удаления заметки: Получаем id из data-* атрибута и фильтруем массив.</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">deleteTodo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> todos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> todo<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Запускаем — работает! Написано всего два простых метода. </p>\n<p>Сейчас нам <strong>ничего</strong> не стоит забрать данные и записать в <em>localStorage</em> браузера, или отправить на <em>сервер</em>, или как-то обрабатывать в коде, т.к. мы всегда знаем, где находятся данные и как они организованы.</p>\n<p>А теперь давайте представим, сколько бы нам потребовалось геморроя, если бы мы писали это в классическом html+js... Приходилось бы руками описывать хендлеры событий каждого контрола, а сборка данных для отправки на сервер превратилась бы в сущий ад в виде цикла по всем контролам и вытаскивания значения. Конечно, для данного примера этот аргумент звучит не слишком сурово. Но представьте здоровенное <em>SPA</em> приложение с несколькими сотнями контролов в сложной иерархии...</p>\n<p>А пока - простейшее туду:</p>\n<p><img src=\"../assets/blog/sapui5-state/basic-todo.png\" alt=\"Запускаем — работает\"></p>\n<p>В представленном варианте: в модели <em>viewState</em> будет храниться объект со следующим содержанием:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    input<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1592739272730\"</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">\"Раз\"</span><span class=\"token punctuation\">,</span> checked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1592739273593\"</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">\"Два\"</span><span class=\"token punctuation\">,</span> checked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1592739274600\"</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">\"Три\"</span><span class=\"token punctuation\">,</span> checked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1592739276362\"</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">\"Четыре\"</span><span class=\"token punctuation\">,</span> checked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1592739277545\"</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">\"Пять\"</span><span class=\"token punctuation\">,</span> checked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"https://github.com/JustAddAcid/sapui5-todo\">Репо с кодом</a></p>\n<p>Продолжение следует.</p>\n<p><a href=\"/tags/javascript\">#javascript</a> <a href=\"/tags/sapui5\">#sapui5</a></p>\n","ogImage":{"url":"/assets/blog/sapui5-state/cover2withHeader.png"},"coverImage":"/assets/blog/sapui5-state/cover2withHeader.png","issueId":"10"}},"__N_SSG":true}