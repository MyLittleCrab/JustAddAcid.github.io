{"pageProps":{"post":{"title":"Как запилить реактивность на SAPUI5 — часть 2","date":"2020-06-21T14:15:07.322Z","slug":"sapui5-state-part2","author":{"name":"Roman A. Nosov","picture":"https://avatars3.githubusercontent.com/u/21103635?s=120&v=4","url":"https://github.com/JustAddAcid"},"content":"<p>С концептом реактивности в <em>SAPUI5</em> немного разобрались. Осталось углубиться в эту тему чуть-чуть подробнее: </p>\n<ol>\n<li>Разобраться с тем, что же такое <em>expression binding</em> и с чем его едят</li>\n<li>А также ответить на вопрос — как подписываться на изменение <em>viewState</em> и выполнять по этому событию какой-либо код. </li>\n</ol>\n<p><img src=\"../assets/blog/sapui5-state-part2/%D0%B4%D0%BE%D0%B1%D1%80%D0%B0%20%D0%BF%D0%BE%D0%B5%D1%88%D1%8C.png\" alt=\"Добра поешь\"></p>\n<h2>Что же такое expression binding и с чем его едят</h2>\n<p>В прошлой статье я немного рассказывал о реактивности в <em>sapui5</em> и показывал пример привязки элементов экрана к данным. Если ещё не читали, то <a href=\"./sapui5-state\">добро пожаловать сюда</a>.</p>\n<p>В тех примерах байндинги описывались прямо в xml верстке. Примерно в таком формате:</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Control</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{modelName>modelProp}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p>В этом случае в свойство контрола автоматически будет попадать значение из модели и автоматически обновляться, если данные в модели изменились.</p>\n<p>Но это далеко не всё, что мы можем описать прямо во вью в декларативном стиле. Например, в некоторых ситуациях очень нужно именно <strong>вычислять</strong> значение поля на основании данных в модели, а не просто показывать какое-то значение.</p>\n<p><strong>Возможные сценарии:</strong></p>\n<ol>\n<li>Подкрашивать красным строки таблицы, где значение какого-нибудь столбца меньше нуля</li>\n<li>Активировать/деактивировать на основании данных кнопки</li>\n<li>Выводить количество записей в массиве и т.д.</li>\n</ol>\n<p><em>Ремарка: сейчас речь пойдет только про </em>expression binding<em>. Про форматтеры поговорим как-нибудь в другой раз.</em></p>\n<p>И такой функционал вычисления свойств <em>sapui5</em> нам охотно может предоставить.</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Control</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= JS_CODE}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p>Всё это выглядит следующим образом: сразу после открывающейся фигурной скобки вставляем знак равенства, так парсер понимает, что дальше будет какое-то вычисляемое поле на <em>js</em>. Далее можно поместить маленький кусок кода на <em>javaScript</em>, который будет выполняться при вычислении содержимого поля. </p>\n<p><em>(Вставлять туда можно константы, вызовы функций, тренарные?операторы:, регэкспы и прочие прелести жизни.)</em></p>\n<p>Главное — не переусердствовать и не превратить разметку страницы в помойку. :)</p>\n<p>Ссылаться на содержимое модели можно с помощью конструкции <strong>${}</strong>. Например: </p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Text</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= <span class=\"token punctuation\">'</span>Hello, <span class=\"token punctuation\">'</span> + ${user>name}}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>В данном случае после <em>\"Hello, \"</em> будет подставлено <em>\"name\"</em> из модели <em>\"user\"</em>. И если в будущем поле <strong>user>name</strong> изменится — автоматически произойдет повторное вычисление всех <em>expression bindings</em>, связанных с этим полем.</p>\n<p><strong>Ахтунг:</strong>\nБудьте внимательны с <em>boolean</em>-атрибутами! </p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Button</span> <span class=\"token attr-name\">enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= someFunction( ${model>prop} )}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>В примере выше значение <em>enabled</em> (с типом <em>bool</em>) принимается из результата функции <em>someFunction</em>. Но если по каким-то причинам из функции возвратится <strong>undefined</strong>, то это значение <strong>не будет</strong> воспринято как <em>falsy</em> (как во всём остальном js), а мистическим образом конвертируется в <strong>true</strong>. Так что, конкретно в этом случае, может быть оправдана вот такая грязная и некрасивая запись (за которую вас могут ударить по рукам):</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Button</span> <span class=\"token attr-name\">enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= !!someFunction( ${model>prop} )}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&#x3C;!-- или --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Button</span> <span class=\"token attr-name\">enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= someFunction( ${model>prop} ) ? true : false }<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>Попробую привести более полные и понятные примеры того, где эти <em>expression bindings</em> можно удобно использовать:</p>\n<h3>Раскрывающееся меню</h3>\n<p>Допустим, нам требуется выпадающее меню вот с таким поведением: при нажатии на toggleButton должна меняться иконка и открываться дочерняя ветка меню. Как это сделать, почти не прибегая к <em>javaScript</em>?</p>\n<p><img src=\"../assets/blog/sapui5-state-part2/menu%20closed.png\" alt=\"menu closed\">\n<img src=\"../assets/blog/sapui5-state-part2/menu%20opened.png\" alt=\"menu opened\"></p>\n<p>Очень просто: использовать для иконок тренарный оператор, который будет вычислять нужную нам иконку. А \"дочернюю\" ветку меню заключить в блок, который делать видимым тогда, когда свойство TransportEnabled в модели будет = true.</p>\n<p>Пример верстки:</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>VBox</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ToggleButton</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Движение транспорта<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= ${/TransportEnabled} ? <span class=\"token punctuation\">'</span>иконка вкл<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span>иконка выкл<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{/TransportEnabled}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>VBox</span> <span class=\"token attr-name\">visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{/TransportEnabled}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ToggleButton</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>В пути<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= ${/TransportOnWay} ? <span class=\"token punctuation\">'</span>иконка вкл<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span>иконка выкл<span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{/TransportOnWay}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ToggleButton</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>На подходе<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= ${/TransportApproaching} ? <span class=\"token punctuation\">'</span>иконка вкл<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span>иконка выкл<span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{/TransportApproaching}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ToggleButton</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Прибыл<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= ${/TransportArrived} ? <span class=\"token punctuation\">'</span>иконка вкл<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span>иконка выкл<span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{/TransportArrived}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>VBox</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>VBox</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h3>Калькулятор</h3>\n<p>Допустим, мы захотели написать простой калькулятор на <em>sapui5</em>. Как нам организовать блокировку кнопки \"decimal point\", когда точка уже введена пользователем? </p>\n<p><img src=\"../assets/blog/sapui5-state-part2/calc%20before.png\" alt=\"calc before\">\n<img src=\"../assets/blog/sapui5-state-part2/calc%20after.png\" alt=\"calc after\"></p>\n<p><em>Не сильно заметно, но на втором скрине кнопка с точкой заблокирована</em></p>\n<p>Можно писать отдельный метод проверки, а можно сделать вот так:</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&#x3C;!-- Само поле ввода чисел в калькулятор --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Input</span> <span class=\"token attr-name\">enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{viewState>/input}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&#x3C;!-- ... --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Button</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">press</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>appendSymbolToLine<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token attr-name\">enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{= !${viewState>/input}.includes(<span class=\"token punctuation\">'</span>.<span class=\"token punctuation\">'</span>) }<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p>Просто проверять, есть ли в строке ввода точки :)</p>\n<p><strong>И напоследок расскажу, как привязывать хендлеры к изменению конкретного свойства в JSON-модели:</strong></p>\n<p>Хитрость заключается в том, что если для этого мы будем использовать класс <strong>sap.ui.model.Binding</strong>, то у нас ничего хорошего не получится. Т.к. хендлер будет запускаться каждый раз, когда изменится <strong>вообще какое-либо</strong> поле в этой модели. </p>\n<p>А для привязки к конкретному полю существует специальный класс: <strong>sap.ui.model.json.JSONPropertyBinding</strong>.</p>\n<p>Давайте прикрутим к нашему калькулятору какой-нибудь хендлер изменения данных в модели. Например, будем рисовать toast-сообщение при записи значения в память нашего калькулятора (при нажатии кнопок M+ и M-)</p>\n<p>Для удобства напишем метод, который будет принимать два аргумента: путь до данных в модели, за которыми будем наблюдать, и функцию, которая будет запускаться при изменении этого поля:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">addViewStateListener</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> oBinding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sap<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>JSONPropertyBinding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">viewState</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oBinding<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">attachChange</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Затем напишем функцию, вызывающую сообщение и привяжем её к данным</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">memoryUsage</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    sap<span class=\"token punctuation\">.</span><span class=\"token property-access\">m</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">MessageToast</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory usage! Set \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// [....]</span>\n  <span class=\"token function-variable function\">onInit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [....]</span>\n  <span class=\"token comment\">// При инициализации привязываем нашу функцию к проперти модели</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addViewStateListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/memory\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">memoryUsage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Готово! При нажатии на m+ получаем вот такое сообщение:</p>\n<p><img src=\"../assets/blog/sapui5-state-part2/calc_handler.jpg\" alt=\"Calc handler\"></p>\n<p>Как всегда, код примера <a href=\"https://github.com/JustAddAcid/sapui5-calculator\">вот здесь</a></p>\n<p>Ещё увидимся</p>\n<p><a href=\"/tags/javascript\">#javascript</a> <a href=\"/tags/sapui5\">#sapui5</a> </p>\n","ogImage":{"url":"/assets/blog/sapui5-state-part2/backgroundWithHeader.png"},"coverImage":"/assets/blog/sapui5-state-part2/backgroundWithHeader.png","issueId":"11"}},"__N_SSG":true}