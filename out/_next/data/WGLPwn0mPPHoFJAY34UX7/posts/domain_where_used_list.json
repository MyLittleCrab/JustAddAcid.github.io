{"pageProps":{"post":{"title":"Ищем, в каких таблицах используется домен в ABAP","date":"2020-07-12T14:15:07.322Z","slug":"domain_where_used_list","author":{"name":"Roman A. Nosov","picture":"https://avatars3.githubusercontent.com/u/21103635?s=120&v=4","url":"https://github.com/JustAddAcid"},"content":"<p>Какое здесь может быть введение? Продолжаю писать образовательные посты с небольшими вкраплениями абсурда, мемов и ненависти ко всему окружающему. Сегодня пишем утилиту. Под <em>SAP</em>. Своё отношение к разработке на этой платформе высказывал в <a href=\"./zcl-date-abap\">предыдущей статье</a>.</p>\n<p>Конкретно эта программа — очень хороший пример, как сама система вынуждает разработчиков усложнять код и делать костыли, чтобы обойти абсолютно <strong>искусственно</strong> расставленные ограничения. Усаживайтесь поудобнее, мы начинаем!</p>\n<p><a href=\"../assets/blog/domain_where_used_list/device.jpg\">NSFW MEME about \"присаживайтесь\"</a></p>\n<h2>Немного теории</h2>\n<p><strong>Що таке домени в <em>SAP</em>?</strong></p>\n<p><strong>Домены в SAP</strong> — это то, что <del>нормальные</del> люди называют <em>типами данных</em>. То, как данные представлены непосредственно в памяти программы или <em>СУБД</em>: строка из N символов, int32, int64, float, enum из определенного набора значений и т.д.</p>\n<p>Есть ещё такое понятие в <em>SAP</em>-тусовке как <strong>элемент данных</strong> (<em>data element</em>). Это \"тип данных на максималках\", который содержит в себе <strong>не только</strong> описание того, как эти данные лежат в памяти, но и дополнительные плюшки в виде:</p>\n<ol>\n<li>Дефолтный заголовок этого поля для разных языков (который подтягивается в поле ввода или заголовок таблицы по умолчанию)</li>\n<li>Ссылка на \"средство поиска\" — программу, которая помогает пользователю заполнить input значением. (Например, предоставить выбор из списка контрагентов с заданными параметрами)</li>\n<li>... прочие второстепенные штуки</li>\n</ol>\n<p>Т.е. сначала объявляется домен, от него наследуется элемент данных, который уже используется для объявления переменных/объявления столбцов в таблицах БД.</p>\n<p><img src=\"../assets/blog/domain_where_used_list/data_element.jpg\" alt=\"Схема наследования\"></p>\n<p>Оукей, на первых парах нам этой информации достаточно. Остальное будем понимать по ходу процесса:</p>\n<h2>Процесс</h2>\n<p><strong>Формулируем</strong>, что мы хотим получить в итоге. Программу, которая:</p>\n<ol>\n<li>Принимает на вход <strong>имя домена</strong> и параметр:\n<ol>\n<li>Считать ли количество строк в таблицах</li>\n</ol>\n</li>\n<li>Выводит список таблиц со следующими полями:\n<ol>\n<li>Имя таблицы, которая использует введенный домен</li>\n<li>Название поля таблицы</li>\n<li>Имя элемента данных этого поля</li>\n<li>Количество строк <strong>или</strong> результат проверки на пустоту (в зависимости от входного параметра) </li>\n</ol>\n</li>\n</ol>\n<p>На самом деле, 95% этой задачи решаются очень быстро. Достаточно найти место в базе данных, где хранятся соответствия таблицы -> типа данных -> домена и сделать селект. (Благо, в БД SAP хранится <strong>ВСЁ</strong>, включая программный код)</p>\n<p>Методом скоростного гугления обнаруживаем две таблицы, которые нам в этом могут помочь:</p>\n<ol>\n<li><strong>dd03l</strong> — соответствие: таблица - поле - тип данных - домен</li>\n<li><strong>dd02l</strong> — соответствие: таблица - класс таблицы (нас не интересуют объявленные типы таблиц, которые <strong>не</strong> используются в БД)</li>\n</ol>\n<p>Ну и простейший селект из них:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> dd03l<span class=\"token token-operator punctuation\">~</span>domname dd03l<span class=\"token token-operator punctuation\">~</span>rollname dd03l<span class=\"token token-operator punctuation\">~</span>fieldname\n    dd03l<span class=\"token token-operator punctuation\">~</span>tabname\n  <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">CORRESPONDING</span> <span class=\"token keyword\">FIELDS</span> <span class=\"token keyword\">OF</span> <span class=\"token keyword\">TABLE</span> rt_tables\n  <span class=\"token keyword\">FROM</span> dd03l <span class=\"token keyword\">JOIN</span> dd02l\n    <span class=\"token keyword\">ON</span> dd03l<span class=\"token token-operator punctuation\">~</span>tabname <span class=\"token operator\">=</span> dd02l<span class=\"token token-operator punctuation\">~</span>tabname <span class=\"token keyword\">AND</span>\n      dd03l<span class=\"token token-operator punctuation\">~</span>as4local <span class=\"token operator\">=</span> dd02l<span class=\"token token-operator punctuation\">~</span>as4local\n  <span class=\"token keyword\">WHERE</span>\n    dd03l<span class=\"token token-operator punctuation\">~</span>domname <span class=\"token keyword\">IN</span> ir_domains <span class=\"token keyword\">AND</span>\n    <span class=\"token eol-comment comment\">\" Активные</span>\n    dd03l<span class=\"token token-operator punctuation\">~</span>as4local <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">AND</span>\n    <span class=\"token eol-comment comment\">\" Таблицы, которые используются в СУБД</span>\n    dd02l<span class=\"token token-operator punctuation\">~</span>tabclass <span class=\"token keyword\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'TRANSP'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CLUSTER'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POOL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Проверка количества записей делается самым очевидным способом: <strong>select count(*)</strong> в цикле по всем таблицам.</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">LOOP</span> <span class=\"token keyword\">AT</span> lt_tables <span class=\"token keyword\">ASSIGNING</span> &#x3C;ls_table><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">SINGLE</span> <span class=\"token keyword\">COUNT</span><span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>&#x3C;ls_table>-tabname<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">INTO</span> lv_records_count<span class=\"token punctuation\">.</span>\n\n  <span class=\"token eol-comment comment\">\" [ .... ]</span>\n<span class=\"token keyword\">ENDLOOP</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Казалось бы, что может пойти не так? Всего лишь осталось реализовать проверку таблицы на пустоту, не делая select count(*) по всей таблице. </p>\n<p>Поскольку за выполнение запросов напрямую в <strong>БД</strong>, минуя прослойку <strong>ABAP</strong> — абаперов бьют по рукам (особенно при миграции на другую <em>СУБД</em>). Разработчикам приходится довольствоваться куцым подмножеством <strong>sql</strong>, который предоставляет ABAP API. В нём напрочь отсутствует не только <em>database-specific-features</em>, но и вполне стандартные вещи типа вложенных запросов.</p>\n<p>Т.е. вот такой простой и понятный запрос у нас ни за что не выполнится:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">top</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> \n      <span class=\"token keyword\">from</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Приходится изобретать велосипед. И единственным выходом в этой ситуации будет попытка сделать селект <strong>хотя бы одной</strong> записи из таблицы и проверка на успех.</p>\n<p>Сказано-сделано:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">LOOP</span> <span class=\"token keyword\">AT</span> lt_tables <span class=\"token keyword\">ASSIGNING</span> &#x3C;ls_table><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">SINGLE</span> <span class=\"token operator\">*</span>\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>&#x3C;ls_table>-tabname<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">INTO</span> <span class=\"token eol-comment comment\">\" ...</span>\n  <span class=\"token eol-comment comment\">\" Так, стоп. А куда присваивать значение?</span>\n  <span class=\"token eol-comment comment\">\" [ .... ]</span>\n<span class=\"token keyword\">ENDLOOP</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Блок <strong>into %var%</strong> пропустить нельзя. Без него компиллятор сваливается с ошибкой. (Про ABAP-подобие байткода как-нибудь в другой раз)</p>\n<p>А куда присваивать значения, если заранее неизвестен тип данных? В <strong>ABAP</strong> таких \"безразмерных\" типов нет. Так что придется как-то объявлять переменные в рантайме. Но с этим не всё так гладко! :)</p>\n<h2>Длинное отступление про принцип объявления переменных в ABAP</h2>\n<p>Казалось бы, о чем здесь рассказывать? Почти каждый относительно-высокоуровневый язык предоставляет очень простой <em>API</em> для объявления переменных. </p>\n<p>В данном случае, переменные объявляются ключевым словом <strong>DATA</strong>, далее идет указание имени переменной и её тип:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">data</span> some_name <span class=\"token keyword\">type</span> string<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Но, поскольку <em>abap</em> — достаточно старый язык, он тянет за собой весьма странное легаси-поведение, которое в современном мире кажется моветоном. Например:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">data</span> some_string <span class=\"token keyword\">type</span> string<span class=\"token punctuation\">.</span>\n    some_string <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">write</span> some_string<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Уважаемые знатоки, внимание вопрос: выполнится ли этот код без ошибки? И выведется ли <em>hello world?</em><br>\nПравильные ответы: <strong>да и да</strong>.</p>\n<p>Если вы на секунду подумали, что объявление переменных в <em>abap</em> ведет себя так же, как ключевое слово <strong>var</strong> в <em>JavaScript</em>, и переменная <em>\"вываливается\"</em> за текущий блок, то спешу вас разочаровать... </p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>\n    <span class=\"token eol-comment comment\">\" Никогда не выполнится</span>\n    <span class=\"token keyword\">data</span> some_string <span class=\"token keyword\">type</span> string<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">.</span>\n\nsome_string <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">write</span> some_string<span class=\"token punctuation\">.</span> <span class=\"token eol-comment comment\">\"hello world </span>\n<span class=\"token eol-comment comment\">\"(да, это работает)</span>\n</code></pre></div>\n<p>Несмотря на то, что выполнение основного интерпретатора программы <strong>никогда</strong> не зайдёт в блок <strong>IF</strong>, переменная всё равно объявится!</p>\n<p><strong>N.B.</strong>: перед выполнением кода, его быстренько пробегает интерпретатор и выделяет память под <strong>все</strong> используемые переменные в этой подпрограмме/методе.</p>\n<p>А объявленные переменные будут доступны в <strong>любом месте</strong> внутри метода/подпрограммы.</p>\n<p>На самом деле, это больше похоже на хостинг функций в <em>JavaScript</em>. <a href=\"https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%9F%D0%BE%D0%B4%D0%BD%D1%8F%D1%82%D0%B8%D0%B5\">Который хорошо описан здесь.</a></p>\n<p>Значит ли это, <del>что всё предопределено</del> что мы не можем выделять память в рантайме, когда на момент компилляции неизвестен тип? </p>\n<p>И да, и нет. Саму переменную всё-таки придется объявить в виде ссылки на \"какую-то\" область памяти. А под неё уточнить тип и выделить память мы можем тогда, когда нам это потребуется. Выглядит это следующим образом:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token eol-comment comment\">\" Создаём переменную как ссылку на \"какие-то\" данные</span>\n<span class=\"token keyword\">data</span> my_var <span class=\"token keyword\">type</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">to</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span>\n<span class=\"token eol-comment comment\">\" Выделяем память под нужный тип данных</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">data</span> my_var <span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'typename'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Это, конечно, прекрасно. Но так просто обращаться к этой области памяти и записывать/читать данные у нас не получится! :) Для этого нам потребуется познакомиться с ещё одним abap-концептом.</p>\n<p>Это <strong>field-symbols</strong> — ссылки на уже <strong>объявленные</strong> переменные или строки таблицы. В примерах выше, где я делал цикл по таблице, я уже использовал <em>field-symbol</em>, куда присваивал адрес \"текущей\" строки в итерации цикла.</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">loop</span> <span class=\"token keyword\">at</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">assigning</span> &#x3C;field<span class=\"token token-operator punctuation\">-</span>symbol><span class=\"token punctuation\">.</span>\n<span class=\"token eol-comment comment\">\" do some shit with &#x3C;field-symbol></span>\n<span class=\"token keyword\">endloop</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>Аналогичное действие придется выполнить и сейчас, чтобы полноценно воспользоваться выделенной памятью, как переменной:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">data</span> my_var <span class=\"token keyword\">type</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">to</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span>\n<span class=\"token eol-comment comment\">\" field-symbol можно объявлять с типом any</span>\n<span class=\"token keyword\">field-symbols</span> &#x3C;link_to_data> <span class=\"token keyword\">type</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">data</span> my_var <span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'typename'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">assign</span> my_var->* <span class=\"token keyword\">to</span> &#x3C;link_to_data><span class=\"token punctuation\">.</span>\n\n<span class=\"token eol-comment comment\">\" do some shit with &#x3C;link_to_data></span>\n</code></pre></div>\n<h2>Финишная прямая:</h2>\n<p>Прикручиваем эти концепты к нашей задаче:</p>\n<div class=\"remark-highlight\"><pre class=\"language-abap\"><code class=\"language-abap\"><span class=\"token keyword\">FIELD-SYMBOLS</span><span class=\"token punctuation\">:</span> &#x3C;lv_temp>  <span class=\"token keyword\">TYPE</span> <span class=\"token keyword\">ANY</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">DATA</span> lo_data <span class=\"token keyword\">TYPE</span> <span class=\"token keyword\">REF</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">LOOP</span> <span class=\"token keyword\">AT</span> it_tables <span class=\"token keyword\">ASSIGNING</span> &#x3C;ls_table><span class=\"token punctuation\">.</span>\n  \n  <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATA</span> lo_data <span class=\"token keyword\">TYPE</span> <span class=\"token punctuation\">(</span>&#x3C;ls_table>-rollname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">ASSIGN</span> lo_data->* <span class=\"token keyword\">TO</span> &#x3C;lv_temp><span class=\"token punctuation\">.</span>\n\n  <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">SINGLE</span> <span class=\"token punctuation\">(</span>&#x3C;ls_table>-fieldname<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>&#x3C;ls_table>-tabname<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">INTO</span> &#x3C;lv_temp><span class=\"token punctuation\">.</span>\n\n  <span class=\"token eol-comment comment\">\"sy-subrc аналог return-code в bash</span>\n  <span class=\"token keyword\">IF</span> sy<span class=\"token token-operator punctuation\">-</span>subrc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>\n    <span class=\"token eol-comment comment\">\" Обработка успешного селекта</span>\n  <span class=\"token keyword\">ELSE</span><span class=\"token punctuation\">.</span>\n    <span class=\"token eol-comment comment\">\" Обработка пустой таблицы</span>\n  <span class=\"token keyword\">ENDIF</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">ENDLOOP</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<h2>Заключение</h2>\n<p>Внезапно этот костыль компилируется и работает. За очисткой данных можно не следить, т.к. за нас её выполнит сборщик мусора. Нам остаётся красиво нарисовать результаты пользователю, но это уже совсем другая история.</p>\n<p>Вот именно таким образом тривиальные задачи усложняются внутри abap во много раз из-за излишних синтаксических ограничений. </p>\n<p>Например, если бы было возможно выполнить вложенный <em>sql</em> или исключить блок \"into\" в запросах, то не пришлось бы в цикле выделять много памяти под абсолютно ненужную переменную, которая никак не обрабатывается в дальнейшем. </p>\n<p>(Кстати, создавая потенциальную утечку памяти, т.к. никто не знает, насколько качественно отрабатывает сборщик мусора)</p>\n<p>На этом всё. Всех благ. :)</p>\n<p><a href=\"/tags/abap\">#abap</a></p>\n","ogImage":{"url":"/assets/blog/domain_where_used_list/background.jpg"},"coverImage":"/assets/blog/domain_where_used_list/background.jpg","issueId":"13"}},"__N_SSG":true}